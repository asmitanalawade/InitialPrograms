package utility;

import java.util.Arrays;
import java.util.Scanner;

import com.bridgelabz.functional.PermutationStr;

public class Utility {
static Scanner sc = new Scanner(System.in);
	public static int m() {
		return sc.nextInt();
	}
	
	
	
	
	
	public static void UserName(String Name){
		if(Name.length() > 3) {
			System.out.println(" Hello " + Name+ ",How are you?");
		}else {
		System.out.println("length of the name is not greater than three");
	}
	}
	
	//*********************************************************************************
	
	public static void HeadsAndTail(int heads,int tail, int n) {
		for(int i = 1; i <= n; i++) {
      	  double a = Math.random();
      	 System.out.println(" " + a);
      	 if(Math.random()<0.5) {
      		 heads = heads + 1;
      	 }else {
      		 tail = tail + 1;
      	 }
       }
       float PercentageOfHeads = (heads/n)*100;
       System.out.println("Number of heads in Percentage" + PercentageOfHeads);
	}
	//***********************************************************************************

	public static void leap(int n) {
		if(n >= 1000) {
			System.out.println("It is a Four digit number");
			if(n%4 == 0) {
				System.out.println("Leap year");
			}else {
				System.out.println("Not a leap year");
			}
		}else {
			System.out.println("It is not four digit number");
		}

	}
	//*************************************************************************************
	
	public static void Power(int num, int power, int i) {
		System.out.println("Power of 2 that are less than or equal to 2^");
		while(i <= 31) {
			System.out.println(" 2^ " + i + " = " + power);
			power = power * 2;
			i++;
		}
	}
	//*************************************************************************************
	
	public static void Harmonics(int n, double sum) {
		 System.out.println("Harmonic series is: ");
	        while(n > 0) {
	        	
	        	sum = sum + (double)1/n;
	        	n--;
	        	System.out.println(" " + sum);
	        }
	       System.out.println(" ");
	       System.out.println("Value of the harmonic series is : "+ sum);
			
	}
	//***********************************************************************************
	
	public static void Factor(int n) {
		for(int i = 2; i <= n; i++) {
			while(n % i == 0) {
				System.out.println(i + " ");
				n= n/i;
			}
			
		}
		if(n > 0)
		
			System.out.println(n);
			
		}
	
	
	//**********************************************************************************
	
	public static void Gambler(int stake, int goal, int num) {
		int bets = 0;
		int wins = 0;
		for(int i = 0; i <= num; i++) {
			int cash = stake;
			while(cash > 0 && cash < goal) {
				bets++;
				if(Math.random() < 0.5) {
					cash++;
				}else {
					cash--;
				}
				
			}
			if(cash == goal) 
				wins++;
			
		}
		System.out.println(wins + " wins of " + num);
		System.out.println("Percent of game won: "+ wins/num*100);
		System.out.println("Average = " + bets/num);
	}
	//*********************************************************************************
	
	public static void Coupon(char[] chars,int max,int random) {
		StringBuffer sb = new StringBuffer();
		while(random > 0) {
			sb.append(chars[random % chars.length]);
			random /= chars.length; 
		}
		String CouponNum = sb.toString();
		System.out.println("Coupon number is: " + CouponNum);
	}
	//******************************************************************************
	
	public static void Array(int m, int n, int[][]matrix) {
		
		
		System.out.println("Enter the 2D array");
		for(int i = 0; i < m; i++)
			for(int j = 0; j < n; j++)
				matrix[i][j] = Utility.m();
				
	}
	//*****************************************************************************
	
	public static void SumThreeNum(int n, int arr[]) {
		boolean found = true;
		for(int i = 0; i < n-2; i++) {
			for(int j = i+1; j < n-1; j++) {
				for(int k = j+1; k < n; k++) {
					if(arr[i]+arr[j]+arr[k] == 0){
						System.out.print(arr[i]);
						System.out.print(" ");
						System.out.print(arr[j]);
						System.out.print(" ");
						System.out.print(arr[k]);
						System.out.print("\n");
						found = true;
					}
						
				}
			}
		}
		if(found == false)
			System.out.println("Not exist");
			
	}
	//******************************************************************************
	
	public static void Distance(int x, int y) {
		double distance; 
		distance = Math.sqrt(x*x + y*y);
		System.out.println("Distance from"+"("+x+","+y+")"+"to"+"(0,0)"+ " = " + distance);
	}
	//*******************************************************************************
	
	public static void permute(String str, int s, int e) {
		if(s == e) {
			System.out.println(str);
		}else {
			for(int i = s; i <= e; i++) {
				
				str = swap(str, s, i);
				permute(str, s+1, e);
				str = swap(str, s, i);
			}
				
		}
	}
	public static String swap(String a, int i,int j) {
		char temp;
		char [] array = a.toCharArray();
		temp = array[i];
		array[i] = array[j];
		array[j] = temp;
		return String.valueOf(array);
		
	}
	//****************************************************************************
	
	public static void StopWatch(double startTime, double stopTime) {
		double elapsedTime ;
		System.out.println("Press 1 to start time ");
		double a = sc.nextInt();
		if(a == 1) {
			startTime = System.currentTimeMillis();
			System.out.println("Start time : " + startTime);
		}
		System.out.println("press 2 to stop time");
		double n = sc.nextInt();
		if(n == 2) {
			stopTime = System.currentTimeMillis();
			System.out.println("Stop time: " + stopTime);
		}
		System.out.println("Press 0 to find the elapsed time");
		double b = sc.nextInt();
		if(b == 0) {
			elapsedTime = stopTime - startTime;
			System.out.println("Elapsed time: " + elapsedTime);
			
		}
	}
	//*****************************************************************************
	
	public static void Quadratic(int a,int b, int c) {
		int d = (b*b)-(4*a*c);
		System.out.println("Answer is: "+ d);
		if(d > 0) {
		double root1 = (-b + (Math.sqrt(d))/(2.0 * a));
		double root2 = (-b - (Math.sqrt(d))/(2.0 * a));
		System.out.println("The roots values of" + root1 + "and" + root2);
		}else if(d == 0) {
			double root1 = (-b /(2.0 * a));
			System.out.println("The root is " + root1);
			
		}else {
			System.out.println("The equation has no real root");
		}

	}
	//*****************************************************************************
	
	public static void WindChill(int t, int v) {
		double w = 35.74 + 0.6215*t +(0.4275*t - 35.75)* Math.pow(v,0.16);
		System.out.println("Wind cill = " + w);
	}
	//*****************************************************************************
	
	// Algorithm Problems
	
	//*****************************************************************************
	
	public static void isAnagram(String str1,String str2) {
		String s1 = str1.replaceAll("\\n", " ");
		String s2 = str2.replaceAll("\\n", " ");
		boolean status = true;
		if(s1.length() != s2.length()) {
		  status = false;
			
		}else {
	
			char[] s1Array = s1.toCharArray();
			char[] s2Array = s2.toCharArray();
			Arrays.sort(s1Array);
			Arrays.sort(s2Array);
			status = Arrays.equals(s1Array,s2Array);
			
		}
		if(status) {
			System.out.println(s1 + " and " + s2 + " is a Anagram");
		}else {
			System.out.println(s1 + " and " + s2 + " is not Anagram");
		}
	}
	//*******************************************************************************
	
	public static void prime(int count) {
		for(int i = 0; i < 1000; i++) {
			boolean isPrimeNumber = true;
			
			for(int j = 2; j < i; j++) {
				while(i % j == 0) {
					isPrimeNumber = false;
					break;
				}
			}
			if(isPrimeNumber) {
				count++;
				System.out.println(i + "  ");
			}
		}
		System.out.println("Count : " + count);

	}
	
	//*******************************************************************************
	
	public static void insertion(int n, String[] array) {
		System.out.println("Enter the letters of the string array ");
		for(int i = 0; i < n; i++) {
			array[i] = sc.next();
			
		}
		System.out.println("Enter the position you want to enter your number");
		int pos = sc.nextInt();
		System.out.println("Enter the letter you want to insert");
		String x = sc.next();
		
		for(int i = n; i < (pos - 1); i++) {
			array[i + 1] = array[i];
		}
		
		array[pos - 1] = x;
		System.out.println("After inserting element: ");
		for(int i = 0; i < n; i++) {
			System.out.println(array[i] + " ");
		}
		System.out.println();
	}
	
	//*******************************************************************************
	
	public static void bubble(int n, int[] array) {
		System.out.println("Enter the element of the array");
		for(int i = 0; i < n; i++) {
			array[i] = sc.nextInt();
		} 
	    for(int i = 0; i < n; i++) {
	    	for(int j= 1; j < n; j++) {
	    		if(array[j-1] > array[j]) {
	    			int temp = array[j-1];
	    			array[j-1] = array[j];
	    			array[j] = temp;
	    		}
	    			
	    	}
	    }
		System.out.println("Bubble sorted array: ");
        for(int i = 0; i < n; i++) {
        	System.out.println(" " + array[i]);
        }
		System.out.println();

	}
	//*******************************************************************************
	
	static void merge(String arr[], int l, int m, int r) 
	{ 
	    
	    int n1 = m - l + 1; 
	    int n2 = r - m; 

	    String L[] = new String[n1]; 
	    String R[] = new String[n2]; 

	    for (int i=0; i<n1; ++i) 
	        L[i] = arr[l + i]; 
	    for (int j=0; j<n2; ++j) 
	        R[j] = arr[m + 1+ j]; 

	    int i = 0, j = 0; 
	    int k = l; 
	    while (i < n1 && j < n2) 
	    {  
	        int comp=L[i].compareTo(R[j]);
	        if (comp<0) 
	        { 
	            arr[k] = L[i]; 
	            i++; 
	        } 
	        else
	        { 
	            arr[k] = R[j]; 
	            j++; 
	        } 
	        k++; 
	    } 

	    while (i < n1) 
	    { 
	        arr[k] = L[i]; 
	        i++; 
	        k++; 
	    } 

	    while (j < n2) 
	    { 
	        arr[k] = R[j]; 
	        j++; 
	        k++; 
	    } 
	} 


	 public static void sort(String arr[], int l, int r) 
	 { 
	     if (l < r) 
	     { 
	         int m = (l+r)/2; 

	         sort(arr, l, m); 
	         sort(arr , m+1, r); 

	         merge(arr, l, m, r); 
	     } 
	 }
	 
	 //*********************************************************************************

	
}
